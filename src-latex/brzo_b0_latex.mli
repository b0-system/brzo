(*---------------------------------------------------------------------------
   Copyright (c) 2019 The b0 programmers. All rights reserved.
   SPDX-License-Identifier: ISC
  ---------------------------------------------------------------------------*)

(** LaTeX domain B0 helpers. *)

open B0_std

(** B0 LaTeX support. *)

module Tool : sig

  val xelatex : B0_memo.Tool.t
  (** [xelatex] is the [xelatex] tool. *)

  val bibtex : B0_memo.Tool.t
  (** [bibtex] is the [bibtex] tool. *)
end

module Compile : sig
  val cmd :
    B0_memo.t -> ?args:Cmd.t -> tex:Fpath.t -> dir:Fpath.t ->
    oname:string -> unit -> unit
    (** [cmd ~tex ~o] compiles [tex] to the PDF file [oname.pdf] in [dir]
        using {!Tool.xelatex}. *)
end

(** [.fls] files reader.

    A [.fls] is generated by TeX tools whenever the [-record] option
    is specified. It indicates all the files read and written by
    the LaTeX generation. *)
module Fls : sig

  (** {1:fls [.fls] Files} *)

  type t
  (** The type for contents of [.fls] files. *)

  val reads : t -> Fpath.Set.t
  (** [reads f] are absolute paths to file reads. *)

  val writes : t -> Fpath.Set.t
  (** [writes f] are absolute paths to file writes. *)

  val of_string : ?file:Fpath.t -> string -> (t, string) result
  (** [of_string s] parses [.fls] data from [s] assuming it
      was read from file [file] (for error reporting, defaults to
      {!Os.File.dash}). *)
end

(** LaTeX utilities *)
module Latex : sig
  val escape : string -> string
  (** [escape s] LaTeX escapes the LaTeX special
      characters ['#'], ['$'], ['%'], ['&'], ['\\'], ['^'], ['_'],
      ['{'], ['}'], ['~']. *)
end

(** DOIs and their resolution. *)
module Doi : sig

  val default_resolver : B0_url.t
  (** [default_resolver] is the default resolver used to
      resolve DOIs. This is [https://doi.org]. *)

  type t = string
  (** The type for DOIs. *)

  val pp : t Fmt.t
  (** [pp] formats a DOI. *)

  val default_bib_format : string
  (** [default_bib_format] is the default bibliographic format.
      This is "application/x-bibtex; charset=utf-8" *)

  val oneline_bib_format : string
  (** [oneline_bib_format] is "text/bibliography; charset=utf-8". *)

  val resolve_to_url :
    ?resolver:string -> B0_http.Http_client.t -> t -> (string, string) result
  (** [resolve_to_url r ~resolver doi] resolve [doi] with [resolver]
      to an URI with [resolver] (defaults to {!default_resolver}). *)

  val resolve_to_bib :
    ?format:string -> ?resolver:B0_url.t ->
    B0_http.Http_client.t -> t -> (string, string) result
  (** [resolve_to_bib r ~resolver doi] resolves [doi] to a bibliographic entry
      with [resolver] (defaults to {!default_resolver}). *)
end

(** Lists of DOIs and their resolution. *)
module Bibdoi : sig

  (** {1:bibdoi [.bibdoi] files} *)

  type t
  (** The type for [.bibdoi] files. *)

  val sexp : t -> B0_sexp.Sexp.t
  (** [sexp b] is [b]'s underlying s-expression. *)

  val dois : t -> Doi.t list
  (** [dois b] is the list of DOIs in [b]. *)

  val of_string : ?file:Fpath.t -> string -> (t, string) result
  (** [of_string s] parses a [.bibdoi] file from [s] assuming it
      was read from file [file] (for error reporting, defaults
      to {!Os.File.dash}. *)

  val to_bibtex :
    ?resolver:string -> B0_http.Http_client.t -> t -> (string, string) result
  (** [to_bibtex r ~resolver b] resolves the DOIs of [b] to bibtex entries
      using [resolver] (defaults to {!Doi.default_resolver}. *)
end
